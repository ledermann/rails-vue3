name: Continuous integration
on: push

jobs:
  test:
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres:13-alpine
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres

      redis:
        image: redis:alpine
        ports: ['6379:6379']

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASSWORD: postgres
      RAILS_ENV: test
      DISABLE_SPRING: 1

    steps:
      - uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache Yarn packages
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Yarn packages
        run: bin/yarn install --frozen-lockfile

      - name: Lint with RuboCop
        run: bin/rubocop --parallel

      - name: Run ESLint
        run: bin/yarn lint

      - name: Check for TypeScript errors
        run: bin/yarn tsc

      - name: Setup PostgreSQL
        run: bin/rails db:create

      - name: Compile assets
        run: bin/rails webpacker:compile

      - name: Run Ruby Tests
        run: bin/rspec

      - name: Run JavaScript tests
        run: bin/yarn test

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Screenshots
          path: tmp/screenshots

  deploy:
    runs-on: ubuntu-20.04

    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')

    needs: test

    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the production image
        run: |
          export COMMIT_TIME=$(git show -s --format=%cI ${GITHUB_SHA})
          export COMMIT_SHA=${GITHUB_SHA}
          docker buildx build --build-arg COMMIT_TIME --build-arg COMMIT_SHA -t app .

      - name: Push the image tagged as LATEST to the container registry
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag app ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:latest

      - name: Push the image tagged with version to the container registry
        if: startsWith(github.ref, 'refs/tags')
        run: |
          docker tag app ghcr.io/${{ github.repository }}:${GITHUB_REF/refs\/tags\//}
          docker push ghcr.io/${{ github.repository }}/:${GITHUB_REF/refs\/tags\//}

      - name: Send deploy notification
        env:
          DEPLOY_HOOK: ${{ secrets.DEPLOY_HOOK }}
        if: env.DEPLOY_HOOK != null
        run: curl -X POST ${{ env.DEPLOY_HOOK }}
